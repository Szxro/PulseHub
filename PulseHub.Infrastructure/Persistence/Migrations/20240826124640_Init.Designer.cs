// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PulseHub.Infrastructure.Persistence;

#nullable disable

namespace PulseHub.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240826124640_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PulseHub.Domain.Entities.AccessKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("application_id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTimeOffset>("DeletedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("EncryptedKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("encrypted_key");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("LastUsed")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("last_used");

                    b.Property<DateTimeOffset>("ModifiedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at_utc");

                    b.HasKey("Id")
                        .HasName("pk_access_key");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("ix_access_key_application_id");

                    b.ToTable("access_key", (string)null);
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTimeOffset>("DeletedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("ModifiedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("ProviderApplicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_application_id");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("provider_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_application");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_application_provider_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_id");

                    b.ToTable("application", (string)null);
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.Credentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTimeOffset>("DeletedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("HashValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("hash_value");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("ModifiedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("SaltValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("salt_value");

                    b.HasKey("Id")
                        .HasName("pk_credentials");

                    b.ToTable("credentials", (string)null);
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTimeOffset>("DeletedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("ModifiedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_provider");

                    b.ToTable("provider", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTimeOffset(new DateTime(2024, 8, 26, 12, 46, 39, 768, DateTimeKind.Unspecified).AddTicks(7410), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAtUtc = new DateTimeOffset(new DateTime(1999, 1, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -4, 0, 0, 0)),
                            Description = "Discord is a platform for text, voice, and video chat, designed for creating and managing communities and staying connected.",
                            IsDeleted = false,
                            ModifiedAtUtc = new DateTimeOffset(new DateTime(2024, 8, 26, 12, 46, 39, 768, DateTimeKind.Unspecified).AddTicks(7411), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Discord"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTimeOffset(new DateTime(2024, 8, 26, 12, 46, 39, 768, DateTimeKind.Unspecified).AddTicks(7414), new TimeSpan(0, 0, 0, 0, 0)),
                            DeletedAtUtc = new DateTimeOffset(new DateTime(1999, 1, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -4, 0, 0, 0)),
                            Description = "Telegram is a messaging app that offers fast, secure text, voice, and video communication. It supports group chats, channels, and multimedia sharing.",
                            IsDeleted = false,
                            ModifiedAtUtc = new DateTimeOffset(new DateTime(2024, 8, 26, 12, 46, 39, 768, DateTimeKind.Unspecified).AddTicks(7415), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Telegram"
                        });
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTimeOffset>("DeletedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at_utc");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockOutEnable")
                        .HasColumnType("bit")
                        .HasColumnName("lock_out_enable");

                    b.Property<DateTime>("LockOutEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("lock_out_end");

                    b.Property<DateTimeOffset>("ModifiedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at_utc");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_user_username");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.UserCredentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at_utc");

                    b.Property<int>("CredentialsId")
                        .HasColumnType("int")
                        .HasColumnName("credentials_id");

                    b.Property<DateTimeOffset>("ModifiedAtUtc")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modified_at_utc");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_credentials");

                    b.HasIndex("CredentialsId")
                        .HasDatabaseName("ix_user_credentials_credentials_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_credentials_user_id");

                    b.ToTable("user_credentials", (string)null);
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.AccessKey", b =>
                {
                    b.HasOne("PulseHub.Domain.Entities.Application", "Application")
                        .WithMany("AccessKeys")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_access_key_application_application_id");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.Application", b =>
                {
                    b.HasOne("PulseHub.Domain.Entities.Provider", "Provider")
                        .WithMany("Applications")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_provider_provider_id");

                    b.HasOne("PulseHub.Domain.Entities.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_user_id");

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.User", b =>
                {
                    b.OwnsOne("PulseHub.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_user_email_value");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.UserCredentials", b =>
                {
                    b.HasOne("PulseHub.Domain.Entities.Credentials", "Credentials")
                        .WithMany("UserCredentials")
                        .HasForeignKey("CredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_credentials_credentials_credentials_id");

                    b.HasOne("PulseHub.Domain.Entities.User", "User")
                        .WithMany("UserCredentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_credentials_user_user_id");

                    b.Navigation("Credentials");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.Application", b =>
                {
                    b.Navigation("AccessKeys");
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.Credentials", b =>
                {
                    b.Navigation("UserCredentials");
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.Provider", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("PulseHub.Domain.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("UserCredentials");
                });
#pragma warning restore 612, 618
        }
    }
}
